ET580 PROJECT 1: DYNAMIC ARRAY CONTAINER CLASS - DOCUMENTATION

SIKDER ISHAQ
==================================================================

Implemented the following core functions:

1. Constructor (intArray)
   - Allocates a dynamic array with default size of 5
   - Initializes numValues to 0
   - Sets up the data pointer to the allocated memory

2. Destructor (~intArray)
   - Properly deallocates the dynamic array using delete[]
   - Prevents memory leaks by cleaning up allocated memory

3. empty() function
   - Returns true if the array contains no elements (numValues == 0)
   - Returns false otherwise
   - Provides a quick way to check if the container is empty

==================================================================
BRIAN
==================================================================

Implemented the following core functions:

1. size() function
   - Returns the current number of elements in the array (numValues)
   - Allows users to check how many elements are currently stored

2. maxSize() function
   - Returns the maximum capacity of the array (maxValues)
   - Indicates how many elements can be stored before resizing is needed

3. reserve() function
   - Increases the capacity of the array if needed
   - Creates a new larger array and copies existing elements
   - Properly manages memory by deleting the old array
   - Updates the maxValues variable to reflect the new capacity

==================================================================
ERNEST
==================================================================

Implemented the following core functions:

1. clear() function
   - Removes all elements from the array
   - Resets the array to its default state (size 5, empty)
   - Properly manages memory by deallocating and reallocating

2. push_back() function
   - Adds a new element to the end of the array
   - Automatically doubles the array capacity when full
   - Increments numValues to track the new element count

3. print() function
   - Displays all array elements on a single line
   - Formats output with spaces between elements
   - Ends with a newline character for clean output

Sikder Ishaq - Phase II: pop_back and insert

What was done-
- These functions extend the `intArray` container with safe removal and insertion.

pop_back
- Purpose: remove the last element if the array contains data.
- Behavior:
  - If the array is empty, the function does nothing (no underflow).
  - If non-empty, `numValues` is decremented by 1. Memory capacity (`maxValues`) is unchanged.
- Complexity: O(1)

insert(value, index)
- Purpose: insert a value at the specified index.
- Parameters:
  - value: integer value to be inserted.
  - index: location to insert, valid values are 0..size(). An index equal to size() appends.
- Behavior:
  - If the index is invalid (<0 or >size()) the function returns false and makes no change.
  - If the internal buffer is full, the container grows via `reserve` (typically doubles capacity).
  - Elements from `index` to `size()-1` are shifted right by one to make space.
  - The value is placed at `data[index]` and `numValues` increments.
- Complexity: O(n) in the worst case due to shifting.

Usage examples (pseudo-code):
  intArray a;
  a.push_back(1);
  a.push_back(3);
  a.insert(2, 1);    // a now contains 1,2,3
  a.pop_back();      // a now contains 1,2

Notes
- These functions intentionally do not shrink the allocated memory when elements are removed. This keeps repeated push/pop efficient.
- Validation is conservative: insert returns false on invalid indices rather than throwing exceptions.

